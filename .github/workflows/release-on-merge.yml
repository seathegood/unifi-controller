name: Release UniFi Update

env:
  IMAGE_NAME: seathegood/unifi-controller

on:
  pull_request:
    types:
      - closed

jobs:
  create-release:
    if: |
      github.repository_owner == 'seathegood' &&
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.head.ref, 'unifi-update-')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Tag and create release
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const branchVersion = pr.head.ref.replace(/^unifi-update-/, '');
            const body = pr.body || '';

            const versionMatch = body.match(/<!--\s*unifi-version:\s*([^\s]+)\s*-->/i);
            const version = (versionMatch ? versionMatch[1] : branchVersion).trim();

            if (!version) {
              core.setFailed('Unable to determine UniFi version from PR metadata.');
              return;
            }

            const releaseUrlMatch = body.match(/<!--\s*release-url:\s*(https?:\/\/[^\s]+)\s*-->/i);
            const releaseUrl = releaseUrlMatch ? releaseUrlMatch[1].trim() : '';

            const tagName = `v${version}`;
            const mergeSha = pr.merge_commit_sha;

            if (!mergeSha) {
              core.setFailed('Merge commit SHA is unavailable; cannot create tag.');
              return;
            }

            let tagExists = true;
            try {
              await github.rest.git.getRef({ owner, repo, ref: `tags/${tagName}` });
              core.info(`Tag ${tagName} already exists.`);
            } catch (error) {
              if (error.status === 404) {
                tagExists = false;
              } else {
                throw error;
              }
            }

            if (!tagExists) {
              await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/tags/${tagName}`,
                sha: mergeSha,
              });
              core.info(`Created tag ${tagName}.`);
            }

            let releaseExists = false;
            try {
              await github.rest.repos.getReleaseByTag({ owner, repo, tag: tagName });
              releaseExists = true;
              core.info(`Release for ${tagName} already exists.`);
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
            }

            if (releaseExists) {
              return;
            }

            const imageName = process.env.IMAGE_NAME || 'seathegood/unifi-controller';
            const sections = [
              '## Summary',
              `- Update UniFi Network Application to ${version}.`,
            ];

            if (releaseUrl) {
              sections.push('', '## Release Notes', `- [UniFi Release Notes](${releaseUrl})`);
            }

            sections.push(
              '',
              '## Docker Images',
              `- \`${imageName}:${version}\``,
              `- \`${imageName}:latest\``,
            );

            const releaseBody = sections.join('\n');

            await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tagName,
              name: `UniFi ${version}`,
              body: releaseBody,
              draft: false,
              prerelease: false,
              target_commitish: 'main',
            });

            core.info(`Created release ${tagName}.`);
